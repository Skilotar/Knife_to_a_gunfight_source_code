using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
using Dungeonator;
using ItemAPI;
using System.Collections;

namespace Knives
{
    class Malware : PassiveItem
    {
        public static void Register()
        {
            //The name of the item
            string itemName = "C Drive of Malware";

            //Refers to an embedded png in the project. Make sure to embed your resources! Google it
            string resourceName = "Knives/Resources/C Drive of Malware";

            //Create new GameObject
            GameObject obj = new GameObject(itemName);

            //Add a PassiveItem component to the object
            var item = obj.AddComponent<Malware>();

            //Adds a sprite component to the object and adds your texture to the item sprite collection
            ItemBuilder.AddSpriteToObject(itemName, resourceName, obj);

            //Ammonomicon entry variables
            string shortDesc = "Scared of nothing";
            string longDesc =

                "An old computer hard disk drive with several mods downloaded on it. It was thrown away for fear of downloading malware. The gundead share in this fear." +
                "\n\n\n - Knife_to_a_Gunfight";

            //Adds the item to the gungeon item list, the ammonomicon, the loot table, etc.
            //Do this after ItemBuilder.AddSpriteToObject!
            ItemBuilder.SetupItem(item, shortDesc, longDesc, "ski");

            //Adds the actual passive effect to the item
            //PlayerController owner = item.LastOwner as PlayerController;



            //Set the rarity of the item


            item.quality = PickupObject.ItemQuality.B;
        }
        public override void Pickup(PlayerController player)
        {
            Malware.fleeData = new FleePlayerData();
            Malware.fleeData.Player = player;
            
            Malware.fleeData.StartDistance = 20f;

            player.PostProcessProjectile += this.PostProcessProjectile;
            base.Pickup(player);
        }
        private System.Random rng = new System.Random();
        private void PostProcessProjectile(Projectile source, float chance)
        {
            chance = rng.Next(1, 10);
            if (chance == 1)
            {
                source.OnHitEnemy = (Action<Projectile, SpeculativeRigidbody, bool>)Delegate.Combine(source.OnHitEnemy, new Action<Projectile, SpeculativeRigidbody, bool>(this.HandleHitEnemy));

            }
        }

        public bool vangaurd = false;
        private void HandleHitEnemy(Projectile arg1, SpeculativeRigidbody arg2, bool arg3)
        {
            arg2.sprite.renderer.material.shader = ShaderCache.Acquire("Brave/Internal/GlitchUnlit");
            arg2.sprite.usesOverrideMaterial = true;
            arg2.sprite.renderer.material.SetFloat("_GlitchInterval", 0.05f);
            arg2.sprite.renderer.material.SetFloat("_DispProbability", 0.4f);
            arg2.sprite.renderer.material.SetFloat("_DispIntensity", 0.04f);
            arg2.sprite.renderer.material.SetFloat("_ColorProbability", 0.4f);
            arg2.sprite.renderer.material.SetFloat("_ColorIntensity", 0.04f);
            vangaurd = true;
        }

        public override DebrisObject Drop(PlayerController player)
        {
            player.PostProcessProjectile -= this.PostProcessProjectile;
            return base.Drop(player);

        }
        private static IEnumerator RemoveFear(AIActor aiactor)
        {
            yield return new WaitForSeconds(5f);
            aiactor.behaviorSpeculator.FleePlayerData = null;
            yield break;
        }
        protected override void Update()
        {
            if(this.Owner != null && vangaurd)
            {
                RoomHandler currentRoom = this.Owner.CurrentRoom;
                
                foreach (AIActor aiactor in currentRoom.GetActiveEnemies(RoomHandler.ActiveEnemyType.All))
                {
                   
                    if (aiactor.sprite.renderer.material.shader != null)
                    {
                        
                        if (aiactor.sprite.renderer.material.shader == ShaderCache.Acquire("Brave/Internal/GlitchUnlit"))
                        {
                            
                            aiactor.behaviorSpeculator.FleePlayerData = Malware.fleeData;
                            GameManager.Instance.StartCoroutine(Malware.RemoveFear(aiactor));
                           
                        }
                    }
                }
            }
           
            base.Update();
        }
        private static FleePlayerData fleeData;
    }
}


